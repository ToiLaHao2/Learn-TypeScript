1. What is TypeScript?
    TypeScript is a syntactic superset of JavaScript which adds static typing.

    This basically means that TypeScript adds syntax on top of JavaScript, allowing developers to add types.

    => TypeScript allows developers to add TYPES.

2. Why should we use TypeScript?
    TypeScript uses compile time type checking. Which means it checks if the specified types match before running the code, not while running the code.
    This helps in catching errors early in the development process, reducing bugs and improving code quality.

3. How do we use TypeScript?
    A common way to use TypeScript is to use the official TypeScript compiler, which transpiles TypeScript code into JavaScript.

    Some popular code editors, such as Visual Studio Code, have built-in TypeScript support and can show errors as you write code!

    Extension of VSC that developers can use to program with TypeScript: ESLint, Prettier or Prettier ESLint, Code Spell Checker, Path Intellisense,
    Auto Rename Tag, Better comments, TypeScript importer, TypeScript toolbox, DotENV, Quokka.js
        
4. TypeScript compiler
    TypeScript being converted into JavaScript means it runs anywhere that JavaScript runs!

    Steps to install the compiler
    1. Install NodeJs
    2. Install TypeScript
        2.1. Open terminal
       
        2.2. npm install -g typescript (Install TypeScript Globally (Recommended for learning and general use))
        
        2.3. Install TypeScript for the project
            2.3.1. Create project folder:
                
                mkdir my-typescript-project
                cd my-typescript-project

            2.3.2. Create project
                
                npm init -y

            2.3.3. Install TypeScript as a developer dependency (devDependencies):
                
                npm install --save-dev typescript

    3. Check TypeScript version
        
        tsc -v
        npx tsc

5. Configuring the compiler

By default the TypeScript compiler will print a help message when run in an empty project.

The compiler can be configured using a tsconfig.json file.

You can have TypeScript create tsconfig.json with the recommended settings with:

    1. Open terminal and move to your project:
        
        cd your-project
    
    2. Type :

        npx tsc --init

6. TypeScript Simple Types

    There are three main primitives in JavaScript and TypeScript.

        boolean - true or false values
        number - whole numbers and floating point values
        string - text values like "TypeScript Rocks"

    There are also 2 less common primitives used in later versions of Javascript and TypeScript.

        bigint - whole numbers and floating point values, but allows larger negative and positive numbers than the number type.
        symbol are used to create a globally unique identifier.

7. Type Assignment

    When creating a variable, there are two main ways TypeScript assigns a type:

        - Explicit: writing out the type: (Recommended)
            
            Ex: let firstName: string = "Dylan";

                => Explicit type assignment are easier to read and more intentional.
        
        - Implicit: TypeScript will "guess" the type, based on the assigned value:

            Ex: let firstName = "Dylan";

                => Having TypeScript "guess" the type of a value is called infer.
                => Implicit assignment forces TypeScript to infer the value.
                   Implicit type assignment are shorter, faster to type, and often used when developing and testing.

8. Error In Type Assignment

    TypeScript will throw an error if data types do not match.

    Ex : 

        let firstName: string = "Dylan"; // type string
        firstName = 33; // attempts to re-assign the value to a different type

    Implicit type assignment would have made firstName less noticeable as a string, but both will throw an error

    Ex :

        let firstName = "Dylan"; // inferred to type string
        firstName = 33; // attempts to re-assign the value to a different type

    => JavaScript will not throw an error for mismatched types.

9. Unable to Infer

    TypeScript may not always properly infer what the type of a variable may be. In such cases, it will set the type to any which disables type checking.

    Ex :

        // Implicit any as JSON.parse doesn't know what type of data it returns so it can be "any" thing...
        const json = JSON.parse("55");
        // Most expect json to be an object, but it can be a string or a number like this example
        console.log(typeof json); (number)

    This behavior can be disabled by enabling noImplicitAny as an option in a TypeScript's project tsconfig.json. That is a JSON config file for customizing how some of TypeScript behaves.

    ! Note: you may see primitive types capitalized like Boolean.

    boolean !== Boolean
    For this tutorial just know to use the lower-cased values, the upper-case ones are for very specific circumstances.

